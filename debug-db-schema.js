const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function debugDatabaseSchema() {
  console.log('üîç „Éá„Éº„Çø„Éô„Éº„Çπ„Çπ„Ç≠„Éº„Éû„Å®RLSË™øÊüªÈñãÂßã...\n');
  
  try {
    // 1. stripe_user_subscriptions„ÉÜ„Éº„Éñ„É´„ÅÆÊßãÈÄ†Á¢∫Ë™ç
    console.log('1Ô∏è‚É£ stripe_user_subscriptions„ÉÜ„Éº„Éñ„É´ÊßãÈÄ†Á¢∫Ë™ç...');
    const { data: schemaInfo, error: schemaError } = await supabase
      .rpc('get_table_columns', { table_name_param: 'stripe_user_subscriptions' })
      .single();
    
    if (schemaError) {
      console.warn('„ÉÜ„Éº„Éñ„É´ÊßãÈÄ†Á¢∫Ë™ç„Ç®„É©„Éº:', schemaError.message);
      
      // ‰ª£ÊõøÊñπÊ≥ï: ÂÆüÈöõ„ÅÆ„ÇØ„Ç®„É™„ÇíË©¶„Åó„Å¶„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„Åã„ÇâÊßãÈÄ†„ÇíÊé®Ê∏¨
      console.log('‰ª£ÊõøÊñπÊ≥ï: ÂÆüÈöõ„ÅÆ„ÇØ„Ç®„É™„Åß„Ç´„É©„É†Á¢∫Ë™ç...');
      
      const { data: testData, error: testError } = await supabase
        .from('stripe_user_subscriptions')
        .select('*')
        .limit(1);
      
      if (testError) {
        console.error('„ÇØ„Ç®„É™„Ç®„É©„Éº:', testError);
      } else {
        console.log('„ÉÜ„Éº„Éñ„É´„Ç¢„ÇØ„Çª„ÇπÊàêÂäü„ÄÇ„Éá„Éº„Çø‰æã:', testData);
      }
    }
    
    // 2. RLS„Éù„É™„Ç∑„ÉºÁ¢∫Ë™ç
    console.log('\n2Ô∏è‚É£ RLS„Éù„É™„Ç∑„ÉºÁ¢∫Ë™ç...');
    const { data: policies, error: policyError } = await supabase
      .from('pg_policies')
      .select('policyname, tablename, cmd, qual, with_check')
      .eq('schemaname', 'public')
      .eq('tablename', 'stripe_user_subscriptions');
    
    if (policyError) {
      console.error('„Éù„É™„Ç∑„ÉºÁ¢∫Ë™ç„Ç®„É©„Éº:', policyError);
    } else {
      console.log('stripe_user_subscriptions„ÅÆRLS„Éù„É™„Ç∑„Éº:');
      policies.forEach(policy => {
        console.log(`  - ${policy.policyname} (${policy.cmd})`);
        console.log(`    Êù°‰ª∂: ${policy.qual || 'ÂÖ®„Å¶'}`);
        console.log(`    „ÉÅ„Çß„ÉÉ„ÇØ: ${policy.with_check || '„Å™„Åó'}`);
      });
    }
    
    // 3. ÂÆüÈöõ„ÅÆ„Ç´„É©„É†ÂêçÁ¢∫Ë™çÔºàÊÉÖÂ†±„Çπ„Ç≠„Éº„Éû„Åã„ÇâÔºâ
    console.log('\n3Ô∏è‚É£ „Ç´„É©„É†ÂêçÁ¢∫Ë™ç...');
    const { data: columns, error: columnsError } = await supabase
      .from('information_schema.columns')
      .select('column_name, data_type')
      .eq('table_schema', 'public')
      .eq('table_name', 'stripe_user_subscriptions')
      .order('ordinal_position');
    
    if (columnsError) {
      console.error('„Ç´„É©„É†Á¢∫Ë™ç„Ç®„É©„Éº:', columnsError);
    } else {
      console.log('stripe_user_subscriptions„ÅÆ„Ç´„É©„É†:');
      columns.forEach(col => {
        console.log(`  - ${col.column_name}: ${col.data_type}`);
      });
    }
    
    // 4. „É¶„Éº„Ç∂„ÉºID„Ç´„É©„É†„ÅÆÁâπÂÆö
    console.log('\n4Ô∏è‚É£ „É¶„Éº„Ç∂„ÉºID„Ç´„É©„É†„Åß„ÅÆ„ÉÜ„Çπ„Éà„ÇØ„Ç®„É™...');
    
    // user_id„Åß„ÉÜ„Çπ„Éà
    const { data: userIdTest, error: userIdError } = await supabase
      .from('stripe_user_subscriptions')
      .select('user_id')
      .limit(1);
    
    console.log('user_id„Ç´„É©„É†„ÉÜ„Çπ„Éà:', userIdError ? `„Ç®„É©„Éº: ${userIdError.message}` : 'ÊàêÂäü');
    
    // userId„Åß„ÉÜ„Çπ„Éà
    const { data: userIdCamelTest, error: userIdCamelError } = await supabase
      .from('stripe_user_subscriptions')
      .select('userId')
      .limit(1);
    
    console.log('userId„Ç´„É©„É†„ÉÜ„Çπ„Éà:', userIdCamelError ? `„Ç®„É©„Éº: ${userIdCamelError.message}` : 'ÊàêÂäü');
    
    // 5. RLS„Éù„É™„Ç∑„Éº„ÅÆÂïèÈ°åÁ¢∫Ë™ç
    console.log('\n5Ô∏è‚É£ RLSÂïèÈ°åÁ¢∫Ë™çÔºàÁâπÂÆö„É¶„Éº„Ç∂„ÉºID„Åß„ÉÜ„Çπ„ÉàÔºâ...');
    
    const testUserId = 'a2c17a51-5e70-40e6-b830-5d5d8d3a204b';
    
    // ÁÆ°ÁêÜËÄÖÊ®©Èôê„Åß„ÅÆ„ÇØ„Ç®„É™
    const { data: adminData, error: adminError } = await supabase
      .from('stripe_user_subscriptions')
      .select('*')
      .eq('user_id', testUserId);
    
    console.log('ÁÆ°ÁêÜËÄÖÊ®©Èôê (user_id):', adminError ? `„Ç®„É©„Éº: ${adminError.message}` : `ÊàêÂäü: ${adminData.length}‰ª∂`);
    
    // 6. ÂÖ®„Å¶„ÅÆ„Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥Á¢∫Ë™ç
    console.log('\n6Ô∏è‚É£ ÂÖ®„Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥Á¢∫Ë™ç...');
    const { data: allSubs, error: allSubsError } = await supabase
      .from('stripe_user_subscriptions')
      .select('*');
    
    if (allSubsError) {
      console.error('ÂÖ®„Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥ÂèñÂæó„Ç®„É©„Éº:', allSubsError);
    } else {
      console.log(`ÂÖ®„Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥: ${allSubs.length}‰ª∂`);
      allSubs.forEach((sub, index) => {
        console.log(`  ${index + 1}. User: ${sub.user_id || sub.userId || 'N/A'}, Status: ${sub.status}, Price: ${sub.price_id || sub.priceId || 'N/A'}`);
      });
    }
    
  } catch (error) {
    console.error('„Éá„Éê„ÉÉ„Ç∞„Ç®„É©„Éº:', error);
  }
}

debugDatabaseSchema(); 