// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")       // 6543 / 本番 / serverless
  directUrl  = env("DIRECT_DATABASE_URL") // 5432 / マイグレーション用
}

// Supabase Auth互換のユーザー認証モデル
model Account {
  id                String  @id @default(cuid())
  userId            String // User.id を参照 (String UUID)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String // User.id を参照 (String UUID)
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid()) // UUIDに変更
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  roleId        String    @default("student")
  accounts      Account[]
  sessions      Session[]
  role          Role      @relation(fields: [roleId], references: [id])
  teacherSlots  LessonSlot[] @relation("TeacherSlots") // teacherId が String UUID を参照
  studentReservations Reservation[] @relation("StudentReservations") // studentId が String UUID を参照
  stripeCustomer      StripeCustomer?          @relation("UserStripeCustomer") // 1対1を想定
  stripeSubscriptions StripeUserSubscription[] // userId が String UUID を参照
  sentMessages        Message[]                @relation("UserMessages") // ★ Messageへの逆リレーション追加
  
  @@index([roleId])
  @@map("users")
}

model Role {
  id          String @id
  name        String
  description String?
  users       User[]
  permissions Permission[]
  
  @@map("roles")
}

model Permission {
  id        String   @id @default(cuid())
  name      String   @unique
  roleId    String // Role.id を参照 (String UUID)
  role      Role     @relation(fields: [roleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([roleId])
  @@map("permissions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model LessonSlot {
  id          String       @id @default(cuid())
  teacherId   String       // User.id を参照 (String UUID)
  teacher     User         @relation("TeacherSlots", fields: [teacherId], references: [id])
  startTime   DateTime     // 開始時間
  endTime     DateTime     // 終了時間
  hourlyRate  Int          @default(6000)  // 時間単価（デフォルト: 6000円）
  currency    String       @default("JPY") // 通貨
  minHours    Int          @default(1)     // 最小予約時間（単位：時間）
  maxHours    Int?         // 最大予約時間（nullの場合は制限なし）
  minDuration Int          @default(60)    // 最小予約時間（単位：分）
  maxDuration Int          @default(90)    // 最大予約時間（単位：分）
  isAvailable Boolean      @default(true)  // 予約可能かどうか
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  reservations Reservation[]
  
  @@index([teacherId])
  @@index([startTime, endTime])
  @@index([startTime, isAvailable])
  @@map("lesson_slots")
}

model Reservation {
  id              String           @id @default(cuid())
  slotId          String           // LessonSlot.id を参照
  slot            LessonSlot       @relation(fields: [slotId], references: [id])
  studentId       String           // User.id を参照
  student         User             @relation("StudentReservations", fields: [studentId], references: [id])
  status          ReservationStatus @default(PENDING)
  payment         Payment?         @relation(fields: [paymentId], references: [id])
  paymentId       String?          @unique // Payment.id を参照
  bookedStartTime DateTime         // 予約開始時間
  bookedEndTime   DateTime         // 予約終了時間
  hoursBooked     Int              @default(1) // 予約時間数（時間単位）
  durationMinutes Int              @default(60) // 予約時間数（分単位）
  totalAmount     Int              // 合計金額（hourlyRate × hoursBooked）
  notes           String?          @db.Text // 備考・メモ
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@index([slotId])
  @@index([studentId])
  @@index([status])
  @@map("reservations")
}

enum ReservationStatus {
  PENDING    // 仮予約（支払い前）
  CONFIRMED  // 確定（支払い完了）
  CANCELED   // キャンセル
  COMPLETED  // 完了
}

model Payment {
  id                String      @id @default(cuid())
  stripeSessionId   String      @unique
  stripePaymentId   String?     @unique
  amount            Int
  currency          String      @default("JPY")
  status            PaymentStatus @default(PENDING)
  reservation       Reservation?
  userId            String
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([userId])
  @@map("payments")
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  CANCELED
}

// --- Stripe関連テーブル ---

model StripeCustomer {
  id          Int     @id @default(autoincrement()) // 画像に合わせて int8 (自動インクリメント) に変更
  userId      String  @unique // ★ @unique 追加 (User.id を参照, String UUID)
  customerId  String  @unique // Stripe Customer ID
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime? // 画像に合わせて追加

  user        User    @relation("UserStripeCustomer", fields: [userId], references: [id]) // ★ Relation名を追加

  @@map("stripe_customers")
}

model StripeUserSubscription {
  id                   Int       @id @default(autoincrement()) // 画像に合わせて int8 (自動インクリメント) に変更
  userId               String    // User.id を参照 (String UUID) - FK制約が必要な場合はuserリレーションを確認
  customerId           String    // Stripe Customer ID
  subscriptionId       String    @unique // Stripe Subscription ID
  priceId              String?   // Stripe Price ID
  status               String?   // 画像に合わせて status に変更 (型はenumも検討)
  currentPeriodStart   BigInt?   // 画像に合わせて int8 (BigInt) に変更
  currentPeriodEnd     BigInt?   // 画像に合わせて int8 (BigInt) に変更
  cancelAtPeriodEnd    Boolean?
  paymentMethodBrand   String?   // 画像に合わせてアンダースコア削除 (payment_method_brand -> paymentMethodBrand)
  paymentMethodLast4   String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  deletedAt            DateTime? // 画像に合わせて追加

  user                 User      @relation(fields: [userId], references: [id]) // userIdがFKなら必須

  @@index([userId])
  @@map("stripe_user_subscriptions") // テーブル名はこれで良いか再確認 (画像は stripe_subscriptions)
}

// stripe_orders テーブルが必要であれば、以下のようなモデルを定義
// model StripeOrder {
//   id                 String @id @default(cuid())
//   checkoutSessionId  String?
//   paymentIntentId    String?
//   customerId         String?
//   amountSubtotal     Int?
//   amountTotal        Int?
//   currency           String?
//   paymentStatus      String? // 例: "paid", "unpaid"
//   status             String? // 例: "open", "complete", "canceled"
//   createdAt          DateTime @default(now())
//   updatedAt          DateTime @updatedAt
//   deletedAt          DateTime?
//
//   // 必要に応じてUserやStripeCustomerとのリレーションを追加
//
//   @@map("stripe_orders")
// }


// --- メッセージテーブル ---

model Message {
  id         String   @id @default(uuid())
  content    String?  @db.Text
  senderId   String   // User.id を参照 (String UUID) - 型注意: 画像は varchar
  senderType String?  @map("sender_type") // 画像に合わせて varchar
  roomId     String?  @map("room_id") // 画像に合わせて varchar
  timestamp  DateTime @default(now()) @db.Timestamptz()
  fileUrls   String[] @map("file_urls") @db.Text // 画像に合わせて _text[]

  sender     User     @relation("UserMessages", fields: [senderId], references: [id]) // ★ Relation名を追加

  @@index([roomId])
  @@index([senderId])
  @@map("messages")
}
