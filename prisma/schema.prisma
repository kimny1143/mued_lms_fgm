generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  users             users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  users        users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model lesson_slots {
  id           String         @id
  teacherId    String
  startTime    DateTime
  endTime      DateTime
  hourlyRate   Int            @default(6000)
  currency     String         @default("JPY")
  minHours     Int            @default(1)
  maxHours     Int?
  isAvailable  Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  minDuration  Int?           @default(60)
  maxDuration  Int?           @default(90)
  users        users          @relation(fields: [teacherId], references: [id])
  reservations reservations[]

  @@index([startTime, endTime])
  @@index([startTime, isAvailable])
  @@index([teacherId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model messages {
  id          String   @id
  content     String?
  senderId    String
  sender_type String?
  room_id     String?
  timestamp   DateTime @default(now()) @db.Timestamptz(6)
  file_urls   String[]
  users       users    @relation(fields: [senderId], references: [id])

  @@index([room_id])
  @@index([senderId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model payments {
  id              String        @id
  stripeSessionId String        @unique
  stripePaymentId String?       @unique
  amount          Int
  currency        String        @default("JPY")
  status          PaymentStatus @default(PENDING)
  userId          String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime
  reservations    reservations?

  @@index([userId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model permissions {
  id        String   @id
  name      String   @unique
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime
  roles     roles    @relation(fields: [roleId], references: [id])

  @@index([roleId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model reservations {
  id              String            @id
  slotId          String
  studentId       String
  status          ReservationStatus @default(PENDING_APPROVAL)
  paymentId       String?           @unique
  bookedStartTime DateTime
  bookedEndTime   DateTime
  hoursBooked     Int               @default(1)
  totalAmount     Int
  notes           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  durationMinutes Int?              @default(60)
  approvedAt      DateTime?
  approvedBy      String?
  rejectedAt      DateTime?
  rejectionReason String?
  payments        payments?         @relation(fields: [paymentId], references: [id])
  lesson_slots    lesson_slots      @relation(fields: [slotId], references: [id])
  users           users             @relation(fields: [studentId], references: [id])

  @@index([slotId])
  @@index([status])
  @@index([studentId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model roles {
  id          String        @id
  name        String        @unique(map: "roles_name_unique")
  description String?
  permissions permissions[]
  users       users[]
}

model stripe_customers {
  id         Int       @id @default(autoincrement())
  userId     String    @unique
  customerId String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime
  deletedAt  DateTime?
  currency   String?   @default("jpy") @db.VarChar(3)
  users      users     @relation(fields: [userId], references: [id])

  @@index([currency], map: "idx_stripe_customers_currency")
}

model stripe_user_subscriptions {
  id                 Int       @id @default(autoincrement())
  userId             String
  customerId         String
  subscriptionId     String    @unique
  priceId            String?
  status             String?
  currentPeriodStart BigInt?
  currentPeriodEnd   BigInt?
  cancelAtPeriodEnd  Boolean?
  paymentMethodBrand String?
  paymentMethodLast4 String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime
  deletedAt          DateTime?
  users              users     @relation(fields: [userId], references: [id])

  @@index([userId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model users {
  id                        String                      @id
  name                      String?
  email                     String?                     @unique
  emailVerified             DateTime?
  image                     String?
  roleId                    String                      @default("student")
  Account                   Account[]
  Session                   Session[]
  lesson_slots              lesson_slots[]
  messages                  messages[]
  reservations              reservations[]
  stripe_customers          stripe_customers?
  stripe_user_subscriptions stripe_user_subscriptions[]
  roles                     roles                       @relation(fields: [roleId], references: [id])

  @@index([roleId])
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  CANCELED
}

enum ReservationStatus {
  PENDING
  PENDING_APPROVAL
  APPROVED
  CONFIRMED
  REJECTED
  CANCELED
  COMPLETED
}
