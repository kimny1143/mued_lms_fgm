generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Account {
  id                  String  @id
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  users               users   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
}

model Session {
  id            String   @id
  session_token String   @unique
  user_id       String
  expires       DateTime
  users         users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model lesson_slots {
  id           String         @id
  teacher_id   String
  start_time   DateTime
  end_time     DateTime
  hourly_rate  Int            @default(6000)
  currency     String         @default("JPY")
  min_hours    Int            @default(1)
  max_hours    Int?
  is_available Boolean        @default(true)
  created_at   DateTime       @default(now())
  updated_at   DateTime
  min_duration Int?           @default(60)
  max_duration Int?           @default(90)
  users        users          @relation(fields: [teacher_id], references: [id])
  reservations reservations[]

  @@index([start_time, end_time])
  @@index([start_time, is_available])
  @@index([teacher_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model messages {
  id          String   @id
  content     String?
  sender_id   String
  sender_type String?
  room_id     String?
  timestamp   DateTime @default(now()) @db.Timestamptz(6)
  file_urls   String[]
  users       users    @relation(fields: [sender_id], references: [id], map: "messages_senderId_fkey")

  @@index([room_id])
  @@index([sender_id], map: "messages_senderId_idx")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model payments {
  id                 String        @id
  stripe_session_id  String        @unique
  stripe_payment_id  String?       @unique
  amount             Int
  currency           String        @default("JPY")
  status             PaymentStatus @default(PENDING)
  user_id            String
  created_at         DateTime      @default(now())
  updated_at         DateTime
  metadata           String?
  charge_executed_at DateTime?     @db.Timestamp(6)
  refunded_at        DateTime?     @db.Timestamp(6)
  refund_amount      Int?
  refund_reason      String?
  reservations       reservations?

  @@index([user_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model permissions {
  id         String   @id
  name       String   @unique
  role_id    String
  created_at DateTime @default(now())
  updated_at DateTime
  roles      roles    @relation(fields: [role_id], references: [id])

  @@index([role_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model reservations {
  id                  String            @id
  slot_id             String
  student_id          String
  status              ReservationStatus @default(PENDING_APPROVAL)
  payment_id          String?           @unique
  booked_start_time   DateTime
  booked_end_time     DateTime
  hours_booked        Int               @default(1)
  total_amount        Int
  notes               String?
  created_at          DateTime          @default(now())
  updated_at          DateTime
  duration_minutes    Int?              @default(60)
  approved_at         DateTime?
  approved_by         String?
  rejected_at         DateTime?
  rejection_reason    String?
  canceled_at         DateTime?         @db.Timestamp(6)
  canceled_by         String?           @db.VarChar(255)
  cancel_reason       String?
  rescheduled_from    String?           @db.VarChar(255)
  rescheduled_to      String?           @db.VarChar(255)
  payments            payments?         @relation(fields: [payment_id], references: [id])
  lesson_slots        lesson_slots      @relation(fields: [slot_id], references: [id])
  users               users             @relation(fields: [student_id], references: [id])

  @@index([slot_id])
  @@index([status])
  @@index([student_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model roles {
  id          String        @id
  name        String        @unique(map: "roles_name_unique")
  description String?
  permissions permissions[]
  users       users[]
}

model stripe_customers {
  id          Int       @id @default(autoincrement())
  user_id     String    @unique
  customer_id String    @unique
  created_at  DateTime  @default(now())
  updated_at  DateTime
  deleted_at  DateTime?
  currency    String?   @default("jpy") @db.VarChar(3)
  users       users     @relation(fields: [user_id], references: [id])

  @@index([currency], map: "idx_stripe_customers_currency")
}

model stripe_user_subscriptions {
  id                   Int       @id @default(autoincrement())
  user_id              String
  customer_id          String
  subscription_id      String    @unique
  price_id             String?
  status               String?
  current_period_start BigInt?
  current_period_end   BigInt?
  cancel_at_period_end Boolean?
  payment_method_brand String?
  payment_method_last4 String?
  created_at           DateTime  @default(now())
  updated_at           DateTime
  deleted_at           DateTime?
  users                users     @relation(fields: [user_id], references: [id])

  @@index([user_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model users {
  id                        String                      @id
  name                      String?
  email                     String?                     @unique
  email_verified            DateTime?
  image                     String?
  role_id                   String                      @default("student")
  Account                   Account[]
  Session                   Session[]
  lesson_slots              lesson_slots[]
  messages                  messages[]
  reservations              reservations[]
  stripe_customers          stripe_customers?
  stripe_user_subscriptions stripe_user_subscriptions[]
  roles                     roles                       @relation(fields: [role_id], references: [id])

  @@index([role_id])
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  CANCELED
  SETUP_COMPLETED
}

enum ReservationStatus {
  PENDING
  PENDING_APPROVAL
  APPROVED
  CONFIRMED
  REJECTED
  CANCELED
  COMPLETED
}
