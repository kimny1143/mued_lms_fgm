#!/usr/bin/env node
/**
 * lesson_slots„ÉÜ„Éº„Éñ„É´„Å®active_lesson_slots„Éì„É•„Éº„ÅÆ„Éá„Éº„Çø„ÇíÊØîËºÉ
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabaseAdmin = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function debugSlotsAndViews() {
  console.log('üîç lesson_slots„Å®active_lesson_slots„ÅÆÊØîËºÉ\n');
  
  try {
    // 1. lesson_slots„ÉÜ„Éº„Éñ„É´„ÅÆ„Éá„Éº„ÇøÊï∞„Å®„Çµ„É≥„Éó„É´
    console.log('1Ô∏è‚É£ lesson_slots„ÉÜ„Éº„Éñ„É´:');
    const { data: allSlots, error: slotsError } = await supabaseAdmin
      .from('lesson_slots')
      .select('*', { count: 'exact' })
      .order('created_at', { ascending: false })
      .limit(10);
    
    if (slotsError) {
      console.error('‚ùå lesson_slotsÂèñÂæó„Ç®„É©„Éº:', slotsError);
    } else {
      const { count: totalCount } = await supabaseAdmin
        .from('lesson_slots')
        .select('*', { count: 'exact', head: true });
      
      console.log(`‚úÖ Á∑è„É¨„Ç≥„Éº„ÉâÊï∞: ${totalCount}`);
      console.log('ÊúÄÊñ∞10‰ª∂:');
      allSlots?.forEach(slot => {
        console.log(`  - ID: ${slot.id}`);
        console.log(`    Teacher: ${slot.teacher_id}`);
        console.log(`    Time: ${slot.start_time} - ${slot.end_time}`);
        console.log(`    Available: ${slot.is_available}`);
        console.log(`    Created: ${slot.created_at}`);
        console.log('');
      });
    }
    
    // 2. active_lesson_slots„Éì„É•„Éº„ÅÆ„Éá„Éº„ÇøÊï∞„Å®„Çµ„É≥„Éó„É´
    console.log('\n2Ô∏è‚É£ active_lesson_slots„Éì„É•„Éº:');
    const { data: activeSlots, error: activeError } = await supabaseAdmin
      .from('active_lesson_slots')
      .select('*', { count: 'exact' })
      .order('created_at', { ascending: false })
      .limit(10);
    
    if (activeError) {
      console.error('‚ùå active_lesson_slotsÂèñÂæó„Ç®„É©„Éº:', activeError);
    } else {
      const { count: activeCount } = await supabaseAdmin
        .from('active_lesson_slots')
        .select('*', { count: 'exact', head: true });
      
      console.log(`‚úÖ Á∑è„É¨„Ç≥„Éº„ÉâÊï∞: ${activeCount}`);
      console.log('ÊúÄÊñ∞10‰ª∂:');
      activeSlots?.forEach(slot => {
        console.log(`  - ID: ${slot.id}`);
        console.log(`    Teacher: ${slot.teacher_id}`);
        console.log(`    Time: ${slot.start_time} - ${slot.end_time}`);
        console.log(`    Available: ${slot.is_available}`);
        console.log('');
      });
    }
    
    // 3. ÁèæÂú®ÊôÇÂàª‰ª•Èôç„ÅÆ„Çπ„É≠„ÉÉ„Éà„ÇíÁ¢∫Ë™ç
    console.log('\n3Ô∏è‚É£ ÁèæÂú®ÊôÇÂàª‰ª•Èôç„ÅÆ„Çπ„É≠„ÉÉ„Éà:');
    const now = new Date().toISOString();
    const { data: futureSlots, count: futureCount } = await supabaseAdmin
      .from('lesson_slots')
      .select('*', { count: 'exact' })
      .gte('end_time', now)
      .order('start_time', { ascending: true })
      .limit(10);
    
    console.log(`‚úÖ Êú™Êù•„ÅÆ„Çπ„É≠„ÉÉ„ÉàÊï∞: ${futureCount}`);
    if (futureSlots && futureSlots.length > 0) {
      console.log('ÊúÄÂàù„ÅÆ10‰ª∂:');
      futureSlots.forEach(slot => {
        console.log(`  - ${slot.start_time} - ${slot.end_time} (Teacher: ${slot.teacher_id})`);
      });
    }
    
    // 4. teacher_id„Åî„Å®„ÅÆÈõÜË®à
    console.log('\n4Ô∏è‚É£ teacher_id„Åî„Å®„ÅÆÈõÜË®à:');
    const { data: teacherStats } = await supabaseAdmin
      .rpc('get_teacher_slot_stats'); // „Åì„ÅÆÈñ¢Êï∞„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØ„Ç®„É©„Éº„Å´„Å™„Çã
    
    if (!teacherStats) {
      // ÊâãÂãï„ÅßÈõÜË®à
      const { data: allTeacherSlots } = await supabaseAdmin
        .from('lesson_slots')
        .select('teacher_id, id');
      
      if (allTeacherSlots) {
        const teacherCounts = {};
        allTeacherSlots.forEach(slot => {
          teacherCounts[slot.teacher_id] = (teacherCounts[slot.teacher_id] || 0) + 1;
        });
        
        console.log('TeacherÂà•„Çπ„É≠„ÉÉ„ÉàÊï∞:');
        Object.entries(teacherCounts).forEach(([teacherId, count]) => {
          console.log(`  - ${teacherId}: ${count}‰ª∂`);
        });
      }
    }
    
    // 5. ÊúÄËøë‰ΩúÊàê„Åï„Çå„Åü„Çπ„É≠„ÉÉ„ÉàÔºà24ÊôÇÈñì‰ª•ÂÜÖÔºâ
    console.log('\n5Ô∏è‚É£ ÊúÄËøë‰ΩúÊàê„Åï„Çå„Åü„Çπ„É≠„ÉÉ„ÉàÔºà24ÊôÇÈñì‰ª•ÂÜÖÔºâ:');
    const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString();
    const { data: recentSlots, count: recentCount } = await supabaseAdmin
      .from('lesson_slots')
      .select('*', { count: 'exact' })
      .gte('created_at', yesterday)
      .order('created_at', { ascending: false });
    
    console.log(`‚úÖ 24ÊôÇÈñì‰ª•ÂÜÖ„Å´‰ΩúÊàê„Åï„Çå„Åü„Çπ„É≠„ÉÉ„Éà: ${recentCount}‰ª∂`);
    if (recentSlots && recentSlots.length > 0) {
      recentSlots.forEach(slot => {
        console.log(`  - ID: ${slot.id}`);
        console.log(`    Teacher: ${slot.teacher_id}`);
        console.log(`    Time: ${slot.start_time} - ${slot.end_time}`);
        console.log(`    Created: ${slot.created_at}`);
        console.log('');
      });
    }
    
  } catch (error) {
    console.error('‚ùå ‰∫àÊúü„Åó„Å™„ÅÑ„Ç®„É©„Éº:', error);
  }
}

debugSlotsAndViews();